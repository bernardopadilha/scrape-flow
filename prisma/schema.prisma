// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Workflow {
  id          String  @id @default(cuid())
  userId      String
  name        String
  description String?

  definition    String
  executionPlan String?
  creditsCost   Int     @default(0)

  cron String? // * * * * *

  status String // DRAFT | PUBLISHED

  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?
  nextRunAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  executions WorkflowExecution[]

  // Usuário não pode ter dois workflows com o mesmo nome
  @@unique([name, userId])
}

model WorkflowExecution {
  id          String    @id @default(cuid())
  userId      String
  trigger     String
  status      String
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?

  definition String @default("{}")

  creditsConsumed Int @default(0)

  phases ExecutionPhase[]

  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId String
}

model ExecutionPhase {
  id      String  @id @default(cuid())
  userId  String
  status  String
  number  Int
  node    String
  name    String
  inputs  String?
  outputs String?

  creditsConsumed Int?

  startedAt   DateTime?
  completedAt DateTime?

  execution           WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  workflowExecutionId String

  logs ExecutionLog[]
}

model ExecutionLog {
  id        String   @id @default(cuid())
  logLevel  String
  message   String
  timestamp DateTime @default(now())

  executionPhaseId String
  executionPhase   ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}

model UserBalance {
  userId  String @id
  credits Int    @default(0)
}

model Credential {
  id     String @id @default(cuid())
  userId String
  name   String
  value  String

  createdAt DateTime @default(now())

  @@unique([name, userId])
}
